#!/usr/bin/env ngs

# Reads JSON from standard input and outputs JSON without duplicate leafs.
# Only first occurence is kept.
# Empty arrays and objects are removed.

# $ echo '{"a": [1,1,2], "b": [1,3], "c": [1,2,3]}' | ./deep-uniq.ngs 
# --> { "a": [ 1, 2 ], "b": [ 3 ] }

seen = Set()

doc "Remove-me" marker
type Marker

F process(x) {
	seen.push(x)
	x
}

F process(x) {
	guard x in seen
	Marker()
}

F process(a:Arr) a.map(process).reject(Marker) or Marker()

F process(h:Hash) h.mapv(process).rejectv(Marker) or Marker()

F main() {
	data = fetch()
	
	section "Work around top level being the Marker" {
		global JsonData
		top_level_type = typeof(data)
		doc Define how to convert Marker into data structure that is convertible to JSON
		doc Return empty object of the correct type: Arr or Hash
		F JsonData(m:Marker) top_level_type()
	}

	data.process().encode_json().echo()
}
