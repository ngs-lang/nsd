#!/usr/bin/env ngs

# Reads JSON from standard input and outputs JSON without duplicate leafs.
# Only first occurence is kept.
# Empty arrays and objects are removed.

# $ echo '{"a": [1,1,2], "b": [1,3], "c": [1,2,3]}' | ./deep-uniq.ngs 
# --> { "a": [ 1, 2 ], "b": [ 3 ] }

# Leaf values that were seen up until now
seen = Set()

# Check for empty array or empty bject
# AnyOf(Arr, Hash) -- a pattern that would match an array or a hash/dictionary/object
# x =~ AnyOf(Arr, Hash) -- check whether x matches the pattern
# not(x) -- true if array or object do not have elements
F empty(x) x =~ AnyOf(Arr, Hash) and not(x)

# Process a leaf that was not seen before.
# Add to seen and return the value as is.
F process(x) {
	seen.push(x)
	x
}

# Process a leaf that was seen before.
# Return empty object. It will be filtered out.
F process(x) {
	guard x in seen
	{} # Empty object to be removed
}

# Process an array
# .map(process) -- process each element
# .reject(empty) -- remove any element that became a empty
F process(a:Arr) a.map(process).reject(empty)

# Process an object/dictionary/hash
# .mapv(process) -- process each value
# .rejectv(empty) -- remove any key/value pair where the value became empty
F process(h:Hash) h.mapv(process).rejectv(empty)

F main() fetch().process().encode_json().echo()

