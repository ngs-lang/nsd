#!/usr/bin/env ngs

ns {

	global init

	type Segment(HashLike)
	type SubSegment(HashLike)
	SEGMENT_LIKE = AnyOf(Segment, SubSegment)

	F init(s:Segment, h:Hash) {
		super(s, h)
		s.Document .= decode_json()
		s.Document._duration = s.Document.end_time - s.Document.start_time
		s.Document.dflt('subsegments', [])
		s.Document.subsegments .= map(SubSegment)
	}

	F init(ss:SubSegment, h:Hash) {
		super(ss, h)
		h.dflt('subsegments', [])
		h.subsegments .= map(SubSegment)
	}

	F subsegments(s:Segment) s.Document.subsegments
	F subsegments(ss:SubSegment) ss.subsegments

	F id(s:Segment) s.Document.id
	F id(ss:SubSegment) ss.id

	F start_time(s:Segment) s.Document.start_time
	F start_time(ss:SubSegment) ss.start_time

	F unflatten(trace:Hash) {
		start_times = []
		segments_by_id = collector/{} {
			trace.Segments.tr(SEGMENT_LIKE -> {
				collect(A.id(), A);
				start_times.push(A.start_time())
				B.descend();
			})
		}

		trace._base_time = min(start_times)

		trace.Segments .= reject(F(s) {
			if (p = s.Document.get('parent_id')) and segments_by_id.has(p) {
				segments_by_id[p].subsegments().push(s.Document)
			}
			p
		})

		trace
	}

	F decode_trace(trace) {
		trace.Segments .= map(Segment)
		trace.unflatten()
	}

	F main(trace_id:Str, trace_id2:Str=null, show_source:Bool=false, show_inferred:Bool=false) {
		assert(trace_id, /^[\da-fA-F-]+$/, 'Given trace id does not match the expected format')

		trace_ids = [trace_id, trace_id2].filter()
		traces = ``log: aws xray batch-get-traces --trace-ids $*trace_ids``.Traces

		trace = traces.map(decode_trace)[0]

		if show_source {
			echo('XRAY: ' + trace.encode_json({'pretty': true}).Lines())
		}

		t = collector {
			seq = Iter(1..null)
			F process(d, lvl=0, parent_id=null) {
				not(show_inferred) and d.get('inferred') returns
				F lvl_pfx(s:Str) '    ' * lvl + s
				F ms(r:Real) ((r * 1000000.0).round() / 1000.0).Int()
				collect({
					'seq': seq.next()
					'name': d.name.lvl_pfx()
					'origin': d.get('origin')
					'inferred': d.get('inferred')
					'_level': lvl
					'id': Str(d.id)
					'parent_id': d.get('parent_id') or parent_id
					'start_time': d.start_time
					'end_time': d.end_time
					'_start_ms': ms(d.start_time - trace._base_time)
					'_end_ms': ms(d.end_time - trace._base_time)
					'_duration_ms': ms(d.end_time - d.start_time)
				})
				# 'aws': d.get('aws', {}).map("${X}=${Y}")
				d.subsegments.sort('start_time').each(process(X, lvl+1, "(${d.id})"))
			}
			trace.Segments.Document.sort('start_time').each(process(X, 0))
		}
		echo(Table(t))
	}
}