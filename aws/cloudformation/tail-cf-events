#!/usr/bin/env ngs

#   {
#     "StackId": "arn:aws:cloudformation:eu-west-1:XXX:stack/sher-test-blah-static-ip/YYY",
#     "EventId": "EcsSubnet1-025b44a1-1b75-47db-a0c9-1428f3f716fc",
#     "StackName": "sher-test-blah-static-ip",
#     "LogicalResourceId": "EcsSubnet1",
#     "PhysicalResourceId": "subnet-0d9c800d3f5a6b162",
#     "ResourceType": "AWS::EC2::Subnet",
#     "Timestamp": "2020-02-07T11:03:06.420Z",
#     "ResourceStatus": "DELETE_IN_PROGRESS"
#   }

F normalize_time_str(s:Str) s.split('.')[0] + '.000Z'

F normalize_time_str(s:Str) {
	# Special case - no dot: 2020-02-11T10:55:19Z
	# Thanks AWS for consistency once again!
	guard '.' not in s
	s[0..-1] + '.000Z'
}

F epoch_time(s:Str) normalize_time_str(s).Time().Int() # NGS doesn't handle fractions of seconds yet

F get_events(stack_name:Str, interval:Int, depth:Int) block b {
	depth_str = '*** ' * depth
	events = null
	while not(events) {
		try {
			events = ``aws cloudformation describe-stack-events --stack-name $stack_name 2>${true}``.reverse()
		} catch(e:ProcessFail) {
			guard e.process.stderr ~ /Stack.*does not exist$/i  # We don't know how to handle any other error
			if depth {
				echo("${depth_str}Nested stack ${stack_name} does not exist")
				b.return([])
			}
			error("Stack ${stack_name} does not exist. Retrying in ${interval} seconds.")
			$(sleep $interval)
		}
	}
	events
}

F main(stack_name:Str, interval:Int=2, start_limit:Int=20, empty_line_seconds:Int=60, depth:Int=0) {

	last_seen_event = null
	last_update_start_event = null

	depth_str = '*** ' * depth

	if depth {
		echo("")
		echo("${depth_str}Descending into nested stack ${stack_name}")
	}

	while true {

		events = get_events(stack_name, interval, depth)

		depth and not(events) returns
		assert(events)

		start = if last_seen_event in events {
			# TODO: Fix "index() is returning null" when new stack is created but last_seen_event is from previous
			events.index(X==last_seen_event) + 1
		} else {
			max(len(events) - start_limit, 0)
		}
		new_events = events[start..null]

		for e in new_events {

			if last_seen_event {
				if e.Timestamp.epoch_time() - last_seen_event.Timestamp.epoch_time() > empty_line_seconds {
					echo("")
				}
			}

			reason = '  ' +? e.get('ResourceStatusReason', '')
			echo("${depth_str}${e.Timestamp}  ${e.ResourceType.Str(50)} ${e.LogicalResourceId.Str(30)} ${e.ResourceStatus}${reason}")
			last_seen_event = e

			if e.ResourceType == 'AWS::CloudFormation::Stack' {

				if e.LogicalResourceId == stack_name {
					if e.ResourceStatus in %[CREATE_IN_PROGRESS UPDATE_IN_PROGRESS] {
						last_update_start_event = e
					}
					# TODO: only print outputs for last UPDATE_COMPLETE
					if e =~ {'ResourceStatus': AnyOf('CREATE_COMPLETE', 'UPDATE_COMPLETE')} {
						outputs = ``aws cloudformation describe-stacks --stack-name $stack_name``.the_one().get('Outputs', []).sort('OutputKey')
						for o in outputs {
							echo("${depth_str}[output] ${o.OutputKey} ${o.OutputValue} - ${o.get('Description', '(no description)')}")

						}
						if last_update_start_event {
							echo("${depth_str}[time] Last create/update/delete took ${e.Timestamp.epoch_time() - last_update_start_event.Timestamp.epoch_time()} seconds")
						}
						if depth {
							echo("${depth_str}Finished with nested stack ${stack_name}")
							echo("")
							return
						} else {
							echo("")
						}
					}
					continue
				}

				if e =~ {'ResourceStatus': /PROGRESS$/, 'PhysicalResourceId': Bool(X)} {
					# $(${ARGV0} ${e.LogicalResourceId})
					nested_stack = ``aws cloudformation describe-stacks --stack-name ${e.PhysicalResourceId}``.the_one()
					main(nested_stack.StackName, interval, start_limit, empty_line_seconds, depth+1)
				}

			}
		}
		$(sleep $interval)
	}
}
